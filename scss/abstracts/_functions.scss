
// ==========================================================================
// abstracts/_functions.scss - Utility Functions
// ==========================================================================

// Converts pixels to rem

/// Convert px to rem with validation and flexible input handling
/// @param {Number} $pixels - The pixel value to convert (can include 'px' unit or be unitless)
/// @param {Number} $base [16px] - The base font size for conversion
/// @return {Number} The converted rem value
/// @throws Error if $pixels is not a number or $base is zero/negative
///   font-size: rem(24px);        // Returns 1.5rem
///   margin: rem(16);             // Returns 1rem (unitless input)
///   padding: rem(12, 14px);      // Returns 0.857rem (custom base)
///   padding: rem(8px 16px 24px); // Returns 0.5rem 1rem 1.5rem


@function rem($pixels, $base: 16px) {
  // Validate inputs
  @if type-of($pixels) != 'number' {
    @error "rem() function expects a number, received #{type-of($pixels)}: #{$pixels}";
  }
  
  @if type-of($base) != 'number' {
    @error "rem() function expects a number for $base, received #{type-of($base)}: #{$base}";
  }
  
  @if $base <= 0 {
    @error "rem() function expects a positive $base value, received: #{$base}";
  }
  
  // Strip units from both values for calculation
  $pixels-value: strip-unit($pixels);
  $base-value: strip-unit($base);
  
  // Return calculated rem value
  @return ($pixels-value / $base-value) * 1rem;
}

// Strip unit from number
@function strip-unit($number) {
    @if type-of($number) == 'number' and not unitless($number) {
        @return $number / ($number * 0 + 1);
    }
    @return $number;
}

// Get spacing value by key
@function spacing($key) {
    @return map-get($spacing, $key);
}

// Get color from theme map
@function color($color-name, $theme: 'light') {
    $color-map: if($theme == 'dark', $colors-dark, $colors-light);
    @return map-get($color-map, $color-name);
}

// Get typography properties
@function font-size($scale) {
    $props: map-get($typography-scale, $scale);
    @return map-get($props, 'size');
}

@function line-height($scale) {
    $props: map-get($typography-scale, $scale);
    @return map-get($props, 'line-height');
}

@function font-weight($scale) {
    $props: map-get($typography-scale, $scale);
    @return map-get($props, 'weight');
}

@function font-family($scale) {
    $props: map-get($typography-scale, $scale);
    @return map-get($props, 'family');
}

/// Generate a contrasting color (light or dark) based on background luminance
@function contrast-color($background, $light: white, $dark: black, $threshold: 0.5) {
    @if lightness($background) > ($threshold * 100%) {
      @return $dark;
    } @else {
      @return $light;
    }
  }
  
  /// Calculate a tint (mix with white) of a color
  @function tint($color, $percentage) {
    @return mix(white, $color, $percentage);
  }
  
  /// Calculate a shade (mix with black) of a color
  @function shade($color, $percentage) {
    @return mix(black, $color, $percentage);
  }
  
  /// Get a z-index value from a predefined scale
  @function z-index($layer) {
    $z-layers: (
      'base': 1,
      'dropdown': 1000,
      'sticky': 1020,
      'fixed': 1030,
      'modal-backdrop': 1040,
      'modal': 1050,
      'popover': 1060,
      'tooltip': 1070,
      'toast': 1080,
      'loading': 1090
    );
    
    @if map-has-key($z-layers, $layer) {
      @return map-get($z-layers, $layer);
    } @else {
      @warn "Unknown z-index layer: #{$layer}";
      @return 1;
    }
  }
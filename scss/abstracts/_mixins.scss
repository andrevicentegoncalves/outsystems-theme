// ==========================================================================
// abstracts/_mixins.scss - Essential Mixins
// ==========================================================================

// ==========================================================================
// 1. RESPONSIVE MIXINS
// ==========================================================================

/// Generate a media query for the specified breakpoint and up
/// @param {String} $breakpoint - The breakpoint name (xs, sm, md, lg, xl, 2xl)
/// @example
///   .container {
///     width: 100%;
///     @include respond-to('md') {
///       width: 750px;
///     }
///   }
@mixin respond-to($breakpoint) {
    $size: map-get($breakpoints, $breakpoint);
    
    @if $size {
    @media (min-width: $size) {
        @content;
    }
    } @else {
    @warn "Breakpoint `#{$breakpoint}` not found in $breakpoints map.";
    }
}

/// Generate a media query between two breakpoints
/// @param {String} $min - The minimum breakpoint name
/// @param {String} $max - The maximum breakpoint name
/// @example
///   .tablet-only {
///     @include respond-between('md', 'lg') {
///       display: block;
///     }
///   }
@mixin respond-between($min, $max) {
    $min-size: map-get($breakpoints, $min);
    $max-size: map-get($breakpoints, $max);
    
    @if $min-size and $max-size {
    @media (min-width: $min-size) and (max-width: ($max-size - 1px)) {
        @content;
    }
    }
}

/// Generate a media query for the specified breakpoint and down (mobile-first exceptions)
/// @param {String} $breakpoint - The breakpoint name
/// @example
///   .mobile-menu {
///     @include respond-to-max('md') {
///       display: block;
///     }
///   }
@mixin respond-to-max($breakpoint) {
    $size: map-get($breakpoints, $breakpoint);
    
    @if $size {
    @media (max-width: ($size - 1px)) {
        @content;
    }
    }
}

// ==========================================================================
// 2. TYPOGRAPHY MIXINS
// ==========================================================================

/// Apply typography scale with font family, size, weight, and line-height
/// @param {String} $scale - The typography scale name (xs, sm, base, lg, xl, h1-h6)
/// @example
///   .title {
///     @include typography('h1');
///   }
///   .body-text {
///     @include typography('base');
///   }
@mixin typography($scale) {
    $props: map-get($typography-scale, $scale);
    
    @if $props {
    font-family: map-get($props, 'family');
    font-size: map-get($props, 'size');
    line-height: map-get($props, 'line-height');
    font-weight: map-get($props, 'weight');
    }
}

/// Apply heading styles with typography scale plus consistent margins
/// @param {String} $level - The heading level (h1, h2, h3, h4, h5, h6)
/// @example
///   .page-title {
///     @include heading('h1');
///   }
///   .section-title {
///     @include heading('h2');
///   }
@mixin heading($level: 'h1') {
    @include typography($level);
    margin-top: 0;
    margin-bottom: spacing('4');
    color: var(--text-primary, $color-neutral-9);
}

/// Truncate text with ellipsis on a single line
/// @example
///   .card-title {
///     @include text-truncate;
///   }
@mixin text-truncate {
    overflow: hidden;
    text-overflow: ellipsis;
    white-space: nowrap;
}

/// Truncate text to a specific number of lines with ellipsis
/// @param {Number} $lines - Number of lines to show before truncating
/// @example
///   .description {
///     @include text-truncate-lines(3);
///   }
@mixin text-truncate-lines($lines: 2) {
    display: -webkit-box;
    -webkit-line-clamp: $lines;
    -webkit-box-orient: vertical;
    overflow: hidden;
}

// ==========================================================================
// 3. LAYOUT MIXINS
// ==========================================================================

/// Center content both horizontally and vertically using flexbox
/// @example
///   .modal-content {
///     @include flex-center;
///   }
@mixin flex-center {
    display: flex;
    align-items: center;
    justify-content: center;
}

/// Distribute content with space between using flexbox
/// @example
///   .header {
///     @include flex-between;
///   }
@mixin flex-between {
    display: flex;
    align-items: center;
    justify-content: space-between;
}

/// Stack content vertically using flexbox
/// @example
///   .sidebar {
///     @include flex-column;
///   }
@mixin flex-column {
    display: flex;
    flex-direction: column;
}

/// Center an absolutely positioned element both horizontally and vertically
/// @example
///   .overlay-content {
///     @include absolute-center;
///   }
@mixin absolute-center {
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
}

/// Make an absolutely positioned element fill its container
/// @example
///   .full-overlay {
///     @include absolute-fill;
///   }
@mixin absolute-fill {
    position: absolute;
    top: 0;
    right: 0;
    bottom: 0;
    left: 0;
}

// ==========================================================================
// 4. COMPONENT MIXINS
// ==========================================================================

/// Generate button variant with custom colors and hover states
/// @param {Color} $bg-color - Background color
/// @param {Color} $text-color - Text color
/// @param {Color} $border-color - Border color (defaults to background color)
/// @example
///   .btn-primary {
///     @include button-variant($color-primary, white);
///   }
///   .btn-success {
///     @include button-variant($color-success, white, darken($color-success, 10%));
///   }
@mixin button-variant($bg-color, $text-color: white, $border-color: $bg-color) {
    background-color: $bg-color;
    color: $text-color;
    border-color: $border-color;
    
    &:hover,
    &:focus {
    background-color: darken($bg-color, 7%);
    border-color: darken($border-color, 10%);
    color: $text-color;
    }
    
    &:active {
    background-color: darken($bg-color, 10%);
    border-color: darken($border-color, 12%);
    }
}

/// Generate button size with consistent padding, font-size, and border-radius
/// @param {Size} $padding-y - Vertical padding
/// @param {Size} $padding-x - Horizontal padding  
/// @param {Size} $font-size - Font size
/// @param {Size} $border-radius - Border radius
/// @example
///   .btn-sm {
///     @include button-size(spacing('2'), spacing('3'), $font-size-sm, $border-radius-sm);
///   }
///   .btn-lg {
///     @include button-size(spacing('4'), spacing('6'), $font-size-lg, $border-radius-lg);
///   }
@mixin button-size($padding-y, $padding-x, $font-size, $border-radius) {
    padding: $padding-y $padding-x;
    font-size: $font-size;
    border-radius: $border-radius;
}

/// Apply card elevation (box-shadow) with predefined levels
/// @param {Number} $level - Elevation level (1-5)
/// @example
///   .card {
///     @include card-elevation(2);
///   }
///   .modal {
///     @include card-elevation(5);
///   }
@mixin card-elevation($level: 1) {
    @if $level == 1 {
    box-shadow: $shadow-sm;
    } @else if $level == 2 {
    box-shadow: $shadow-base;
    } @else if $level == 3 {
    box-shadow: $shadow-md;
    } @else if $level == 4 {
    box-shadow: $shadow-lg;
    } @else if $level == 5 {
    box-shadow: $shadow-xl;
    }
}

// ==========================================================================
// 5. UTILITY MIXINS
// ==========================================================================

/// Hide element visually but keep it accessible to screen readers
/// @example
///   .sr-only-text {
///     @include screen-reader-only;
///   }
@mixin screen-reader-only {
    position: absolute;
    width: 1px;
    height: 1px;
    padding: 0;
    margin: -1px;
    overflow: hidden;
    clip: rect(0, 0, 0, 0);
    white-space: nowrap;
    border: 0;
}

/// Clear floats using the clearfix hack
/// @example
///   .container {
///     @include clearfix;
///   }
@mixin clearfix {
    &::after {
    content: "";
    display: table;
    clear: both;
    }
}

/// Add smooth transitions to properties
/// @param {String|List} $properties - CSS properties to transition (default: all)
/// @param {Time} $duration - Transition duration (default: 0.3s)
/// @param {String} $easing - Transition timing function (default: ease)
/// @example
///   .button {
///     @include transition(background-color, 0.2s, ease-in-out);
///   }
///   .card {
///     @include transition((transform, box-shadow), 0.3s);
///   }
@mixin transition($properties: all, $duration: 0.3s, $easing: ease) {
    transition: $properties $duration $easing;
}

// ==========================================================================
// 6. ANIMATION & LOADING MIXINS
// ==========================================================================

/// Create a CSS spinner/loading animation
/// @param {Number} $size [2rem] - Size of the spinner
/// @param {Color} $color [$color-primary] - Color of the spinner
/// @param {Number} $thickness [2px] - Border thickness
/// @param {Time} $duration [1s] - Animation duration
/// @example
///   .loading-spinner {
///     @include spinner();
///   }
///   .small-loader {
///     @include spinner(1rem, $color-success, 1px, 0.8s);
///   }
@mixin spinner($size: 2rem, $color: $color-primary, $thickness: 2px, $duration: 1s) {
    width: $size;
    height: $size;
    border: $thickness solid rgba($color, 0.2);
    border-top: $thickness solid $color;
    border-radius: 50%;
    animation: spin $duration linear infinite;
    
    @keyframes spin {
    0% { transform: rotate(0deg); }
    100% { transform: rotate(360deg); }
    }
}

/// Create a pulsing animation (for loading states)
/// @param {Time} $duration [2s] - Animation duration
/// @param {Number} $min-opacity [0.5] - Minimum opacity
/// @param {Number} $max-opacity [1] - Maximum opacity
/// @param {String} $direction [normal] - Animation direction (normal, reverse)
/// @example
///   .loading-text {
///     @include pulse();
///   }
///   .attention-text {
///     @include pulse(1.5s, 0.3, 0.7, reverse);
///   }
@mixin pulse($duration: 2s, $min-opacity: 0.5, $max-opacity: 1, $direction: normal) {
    @if $direction == reverse {
    animation: pulseReverse $duration ease-in-out infinite alternate;
    
    @keyframes pulseReverse {
        0% { opacity: $max-opacity; }
        100% { opacity: $min-opacity; }
    }
    } @else {
    animation: pulse $duration ease-in-out infinite alternate;
    
    @keyframes pulse {
        0% { opacity: $min-opacity; }
        100% { opacity: $max-opacity; }
    }
    }
}

/// Create a skeleton loading placeholder
/// @param {Color} $base-color [#e2e8f0] - Base skeleton color
/// @param {Color} $shimmer-color [#f8fafc] - Shimmer highlight color
/// @param {Time} $duration [2s] - Animation duration
/// @param {String} $direction [right] - Shimmer direction (right, left)
/// @example
///   .skeleton-text {
///     @include skeleton();
///     height: 1rem;
///     border-radius: 4px;
///   }
///   .skeleton-reverse {
///     @include skeleton(#e2e8f0, #f8fafc, 2s, left);
///   }
@mixin skeleton($base-color: #e2e8f0, $shimmer-color: #f8fafc, $duration: 2s, $direction: right) {
    background: linear-gradient(90deg, $base-color 25%, $shimmer-color 50%, $base-color 75%);
    background-size: 200% 100%;
    
    @if $direction == left {
    animation: shimmerLeft $duration ease-in-out infinite;
    } @else {
    animation: shimmerRight $duration ease-in-out infinite;
    }
    
    @keyframes shimmerRight {
    0% { background-position: -200% 0; }
    100% { background-position: 200% 0; }
    }
    
    @keyframes shimmerLeft {
    0% { background-position: 200% 0; }
    100% { background-position: -200% 0; }
    }
}

/// Create a fade-in animation
/// @param {Time} $duration [0.3s] - Animation duration
/// @param {String} $easing [ease-out] - Animation timing function
/// @param {Number} $delay [0s] - Animation delay
/// @example
///   .modal {
///     @include fade-in();
///   }
///   .delayed-content {
///     @include fade-in(0.5s, ease-in, 0.2s);
///   }
@mixin fade-in($duration: 0.3s, $easing: ease-out, $delay: 0s) {
    opacity: 0;
    animation: fadeIn $duration $easing $delay forwards;
    
    @keyframes fadeIn {
    to { opacity: 1; }
    }
}

/// Create a slide-in animation from specified direction
/// @param {String} $direction [up] - Direction (up, down, left, right)
/// @param {Number} $distance [20px] - Distance to slide
/// @param {Time} $duration [0.3s] - Animation duration
/// @param {String} $easing [ease-out] - Animation timing function
/// @example
///   .slide-up {
///     @include slide-in(up);
///   }
///   .slide-left {
///     @include slide-in(left, 30px, 0.4s);
///   }
@mixin slide-in($direction: up, $distance: 20px, $duration: 0.3s, $easing: ease-out) {
    $translate-from: translateY($distance);
    
    @if $direction == down {
    $translate-from: translateY(-$distance);
    } @else if $direction == left {
    $translate-from: translateX($distance);
    } @else if $direction == right {
    $translate-from: translateX(-$distance);
    }
    
    transform: $translate-from;
    opacity: 0;
    animation: slideIn#{capitalize($direction)} $duration $easing forwards;
    
    @keyframes slideIn#{capitalize($direction)} {
    to {
        transform: translate(0, 0);
        opacity: 1;
    }
    }
}

// ==========================================================================
// 7. FORM & INPUT MIXINS
// ==========================================================================

/// Style form inputs with consistent appearance
/// @param {Color} $border-color [$color-neutral-3] - Border color
/// @param {Color} $focus-color [$color-primary] - Focus border color
/// @param {Number} $border-radius [$border-radius-base] - Border radius
/// @example
///   .form-input {
///     @include input-style();
///   }
///   .custom-input {
///     @include input-style($color-neutral-4, $color-success, 8px);
///   }
@mixin input-style($border-color: $color-neutral-3, $focus-color: $color-primary, $border-radius: $border-radius-base) {
    padding: $input-padding-y $input-padding-x;
    border: $input-border-width solid $border-color;
    border-radius: $border-radius;
    font-size: $input-font-size;
    line-height: $input-line-height;
    background-color: var(--input-bg, white);
    color: var(--input-text, $color-neutral-9);
    transition: border-color 0.2s ease, box-shadow 0.2s ease;
    
    &:focus {
    outline: none;
    border-color: $focus-color;
    box-shadow: 0 0 0 3px rgba($focus-color, 0.1);
    }
    
    &::placeholder {
    color: var(--input-placeholder, $color-neutral-5);
    }
    
    &:disabled {
    background-color: var(--input-disabled-bg, $color-neutral-1);
    color: var(--input-disabled-text, $color-neutral-5);
    cursor: not-allowed;
    }
}

/// Create a floating label effect for inputs
/// @example
///   .form-field {
///     @include floating-label();
///   }
@mixin floating-label() {
    position: relative;
    
    input {
    padding-top: 1.5rem;
    padding-bottom: 0.5rem;
    
    &:focus + label,
    &:not(:placeholder-shown) + label {
        transform: translateY(-0.75rem) scale(0.85);
        color: var(--label-focus-color, $color-primary);
    }
    }
    
    label {
    position: absolute;
    top: 1rem;
    left: 0.75rem;
    pointer-events: none;
    transition: all 0.2s ease;
    transform-origin: left top;
    color: var(--label-color, $color-neutral-5);
    }
}

// ==========================================================================
// 8. ACCESSIBILITY & UTILITY MIXINS
// ==========================================================================

/// Create a focus ring that meets accessibility standards
/// @param {Color} $color [$color-primary] - Focus ring color
/// @param {Number} $width [3px] - Focus ring width
/// @param {Number} $offset [2px] - Offset from element
/// @example
///   .btn {
///     @include focus-ring();
///   }
///   .custom-focus {
///     @include focus-ring($color-success, 2px, 1px);
///   }
@mixin focus-ring($color: $color-primary, $width: 3px, $offset: 2px) {
    &:focus-visible {
    outline: $width solid $color;
    outline-offset: $offset;
    }
    
    // Fallback for browsers that don't support :focus-visible
    &:focus:not(:focus-visible) {
    outline: none;
    }
}

/// Apply styles only for reduced motion preference
/// @example
///   .animated-element {
///     animation: slideIn 0.3s ease;
///     
///     @include reduced-motion {
///       animation: none;
///     }
///   }
@mixin reduced-motion {
    @media (prefers-reduced-motion: reduce) {
    @content;
    }
}

/// Apply styles only for high contrast preference
/// @example
///   .button {
///     @include high-contrast {
///       border: 2px solid;
///     }
///   }
@mixin high-contrast {
    @media (prefers-contrast: high) {
    @content;
    }
}

/// Create a tooltip with pure CSS
/// @param {String} $position [top] - Position (top, bottom, left, right)
/// @param {Color} $bg-color [black] - Tooltip background
/// @param {Color} $text-color [white] - Tooltip text color
/// @example
///   .tooltip-trigger {
///     @include tooltip(top, $color-neutral-8, white);
///   }
@mixin tooltip($position: top, $bg-color: black, $text-color: white) {
    position: relative;
    cursor: help;
    
    &::before,
    &::after {
    position: absolute;
    opacity: 0;
    pointer-events: none;
    transition: opacity 0.2s ease, transform 0.2s ease;
    }
    
    // Tooltip content
    &::before {
    content: attr(data-tooltip);
    background: $bg-color;
    color: $text-color;
    padding: 0.5rem 0.75rem;
    border-radius: 4px;
    font-size: 0.875rem;
    white-space: nowrap;
    z-index: z-index('tooltip');
    
    @if $position == top {
        bottom: 100%;
        left: 50%;
        transform: translateX(-50%) translateY(-8px);
    } @else if $position == bottom {
        top: 100%;
        left: 50%;
        transform: translateX(-50%) translateY(8px);
    } @else if $position == left {
        right: 100%;
        top: 50%;
        transform: translateY(-50%) translateX(-8px);
    } @else if $position == right {
        left: 100%;
        top: 50%;
        transform: translateY(-50%) translateX(8px);
    }
    }
    
    // Tooltip arrow
    &::after {
    content: '';
    border: 6px solid transparent;
    
    @if $position == top {
        bottom: 100%;
        left: 50%;
        border-top-color: $bg-color;
        transform: translateX(-50%) translateY(6px);
    } @else if $position == bottom {
        top: 100%;
        left: 50%;
        border-bottom-color: $bg-color;
        transform: translateX(-50%) translateY(-6px);
    }
    }
    
    &:hover::before,
    &:hover::after {
    opacity: 1;
    }
}
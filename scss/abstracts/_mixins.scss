@mixin apply-font($font-family, $font-weight) {
  @if $font-family == 'roboto' {
      @if $font-weight == 'thin' {
          font-family: 'Roboto', sans-serif;
          font-weight: 100;
      } @else if $font-weight == 'light' {
          font-family: 'Roboto', sans-serif;
          font-weight: 300;
      } @else if $font-weight == 'regular' {
          font-family: 'Roboto', sans-serif;
          font-weight: 400;
      } @else if $font-weight == 'bold' {
          font-family: 'Roboto', sans-serif;
          font-weight: 700;
      }
  } @else if $font-family == 'lato' {
      @if $font-weight == 'thin' {
          font-family: 'Lato', sans-serif;
          font-weight: 100;
      } @else if $font-weight == 'light' {
          font-family: 'Lato', sans-serif;
          font-weight: 300;
      } @else if $font-weight == 'regular' {
          font-family: 'Lato', sans-serif;
          font-weight: 400;
      } @else if $font-weight == 'bold' {
          font-family: 'Lato', sans-serif;
          font-weight: 700;
      }
  } @else if $font-family == 'montserrat' {
      @if $font-weight == 'thin' {
          font-family: 'Montserrat', sans-serif;
          font-weight: 100;
      } @else if $font-weight == 'light' {
          font-family: 'Montserrat', sans-serif;
          font-weight: 300;
      } @else if $font-weight == 'regular' {
          font-family: 'Montserrat', sans-serif;
          font-weight: 400;
      } @else if $font-weight == 'bold' {
          font-family: 'Montserrat', sans-serif;
          font-weight: 700;
      }
  }
}


@mixin flexbox($direction: row, $justify: center, $align: center) {
    display: flex;
    flex-direction: $direction;
    justify-content: $justify;
    align-items: $align;
}

@mixin flex-center {
  display: flex;
  align-items: center;
  justify-content: center;
}

@mixin responsive($breakpoint) {
  @if $breakpoint == xs {
    @content;
  }
  @else if $breakpoint == sm {
    @media (min-width: #{$breakpoint-phone}) {
      @content;
    }
  }
  @else if $breakpoint == md {
    @media (min-width: #{$breakpoint-tablet}) {
      @content;
    }
  }
  @else if $breakpoint == lg {
    @media (min-width: #{$breakpoint-tablet-horizontal}) {
      @content;
    }
  }
  @else if $breakpoint == xl {
    @media (min-width: #{$breakpoint-desktop}) {
      @content;
    }
  }
}

@mixin generate-grid-columns($breakpoints, $grid-columns) {
    @each $breakpoint, $min-width in $breakpoints {
      @media (min-width: $min-width) {
        @for $i from 1 through $grid-columns {
          .row .col-#{$breakpoint}-#{$i} { 
            grid-column: span $i;
          }
        }
      }
    }
}

@mixin default-grid-columns($grid-columns) {
  @for $i from 1 through $grid-columns {
    .col-#{$i} {
      grid-column: span $i;
    }
  }
}
  
@mixin font-style($size: $font-size-base, $line-height: $line-height-base) {
  font-size: $size;
  line-height: $line-height;
}

@mixin box-shadow($shadow: $box-shadow) {
  box-shadow: $shadow;
}

@mixin transition($property: all, $duration: 0.2s, $timing: ease-in-out) {
  transition: $property $duration $timing;
}

@mixin absolute($top: $position-top-none, $right: $position-right-none, $bottom: $position-bottom-none, $left: $position-left-none) {
  position: absolute;
  top: $top;
  right: $right;
  bottom: $bottom;
  left: $left;
}

@mixin truncate($width: $truncate-width, $mobile-width: null) {
  max-width: $width;
  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis;

  @if $mobile-width {
    @media (max-width: $breakpoint-phone) {
      max-width: $mobile-width;
    }
  }
}

@mixin truncate-parent {
  overflow: hidden;
  flex: 1;
  display: flex;  
  align-items: center; 
}

@mixin create-grid($class, $columns) {
  .grid-#{$class} {
    display: grid;
    gap: $grid-gap;

    @each $breakpoint, $column-count in $columns {
      @if $breakpoint == 'xs' {
        grid-template-columns: repeat($column-count, minmax(0, 1fr));
        -ms-grid-columns: repeat($column-count, 1fr); 
      } @else {
        @media (min-width: map-get($grid-breakpoints, $breakpoint)) {
          grid-template-columns: repeat(map-get($columns, $breakpoint), minmax(0, 1fr));
          -ms-grid-columns: repeat(map-get($columns, $breakpoint), 1fr); 
        }
      }
    }
  }
}

@mixin create-responsive-grid-container($items, $tablet-items: 2, $phone-items: 1) {
  display: grid;
  grid-template-columns: repeat($items, 1fr);
  gap: var(--space-m);

  // Tablet breakpoint
  @media (max-width: $breakpoint-desktop) {
    grid-template-columns: repeat($tablet-items, 1fr);
    gap: var(--space-base);
  }

  // Phone landscape breakpoint
  @media (max-width: $breakpoint-tablet) {
    grid-template-columns: repeat($phone-items, 1fr);
    gap: var(--space-base);
  }

  // Phone portrait breakpoint
  @media (max-width: $breakpoint-phone) {
    grid-template-columns: 1fr;
  }

  &__item {
    width: 100%;

    .form-control {
      width: 100%;
    }

    label {
      margin-bottom: var(--space-s);
    }
  }
}

@mixin flex-column {
  display: flex;
  flex-direction: column;
}

@mixin glow-animation($speed: 3s, $opacity: 0.9) { 
  animation: glow $speed linear infinite;
  background: linear-gradient(to right, 
    rgba(255, 255, 255, 0) 0%, 
    rgba(0, 0, 0, 0.3) 50%, 
    rgba(255, 255, 255, 0) 100%);
  bottom: 0;
  content: "";
  left: 0;
  opacity: $opacity;
  position: absolute;
  top: 0;
  width: 100%;
}

@mixin gpu-accelerate {
  transform: translate3d(0, 0, 0);
  backface-visibility: hidden;
  perspective: 1000px;
  will-change: transform;
}

@mixin base-component {
  border-radius: $border-radius-soft;
  background-color: $color-neutral-0;
  box-shadow: $box-shadow;
  box-sizing: border-box;
}

@mixin text-alignment {
  .value {
      text-align: left !important;
      * { text-align: left !important; }
  }
  
  .merged-text {
      text-align: center !important;
      * { text-align: center !important; }
  }
}

@mixin mobile-padding {
  @media (max-width: $breakpoint-phone) {
      padding: $space-s;
      min-height: 80px;
  }
}
